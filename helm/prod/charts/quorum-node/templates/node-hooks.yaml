

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "quorum-node.fullname" . }}-hooks-sa
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"  

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "quorum-node.fullname" . }}-hooks-role
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"  
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create", "get", "list", "update", "delete" ]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "quorum-node.fullname" . }}-hooks-rb
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"    
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "quorum-node.fullname" . }}-hooks-role
subjects:
- kind: ServiceAccount
  name: {{ include "quorum-node.fullname" . }}-hooks-sa
  namespace:  {{ .Release.Namespace }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "quorum-node.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "hook-succeeded"
  labels:
    aadpodidbinding: "{{ .Values.azure.identityName }}"     
spec:
  backoffLimit: 1
  completions: 1
  template:
    metadata:
      labels:
        aadpodidbinding: "{{ .Values.azure.identityName }}"  
    spec:
      serviceAccountName: {{ include "quorum-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      nodeSelector:
        env: prod
      containers:
      - name: {{ template "quorum-node.fullname" . }}-quorum-pre-start-hook
        image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 0
        command:
          - /bin/bash
          - -c
        args:
          - |

            echo "{{ template "quorum-node.fullname" . }} Pre Install hook ..."

    
            function safeWriteSecret {
              key=$1
              fpath=$2
              az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
              if [ $? -ne 0 ]; then
                az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
              else
                # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
              fi
            }

            function update_enodes_configmap {
              kubectl -n {{ .Release.Namespace }} get configmap quorum-node-enodes -o json
              if [ $? -ne 0 ]; then
                  echo "[]" > /tmp/static-nodes.json.raw
              fi
              # update the entries
              echo "updating quorum-node-enodes..."
              pubkey=$(cat /tmp/nodekey.pub )
              echo $(kubectl -n {{ .Release.Namespace }} get configmap quorum-node-enodes -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
              NEEDLE="enode://$pubkey@.{{ template "quorum-node.fullname" . }}-0.{{ template "quorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0"
              cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "$NEEDLE" '. += [ $NEEDLE ] | unique ' > /tmp/static-nodes.json
              kubectl -n {{ .Release.Namespace }} create configmap quorum-node-enodes --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run | kubectl replace -f -
            }

            function update_tessera_peers_configmap {
              kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
              # first time a tx node is deployed and there is no configmap 
              if [ $? -ne 0 ]; then
                echo "No tessera-peers found, creating a new one..."
                echo "[{ \"url\": \"http://{{ template "quorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000\" }]"  > /tmp/tessera-peers 
                kubectl --namespace {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers 

              # update the entries
              else
                echo "Tessera-peers found, updating existing..."
                echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                NEEDLE="http://{{ template "quorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000"
                cat /tmp/tessera-peers.raw | jq --arg NEEDLE "$NEEDLE" '. += [{"url": $NEEDLE}] | unique ' > /tmp/tessera-peers
                kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run | kubectl replace -f -
              fi
            }

            az login --identity --debug

            echo "Quorum nodekey generation ..."
            cd /tmp
            /opt/istanbul-tools/bin/bootnode -genkey /tmp/nodekey --writeaddress > /tmp/nodekey.pub
            echo -ne $(cat /tmp/nodekey.pub) > /tmp/enode

            echo "Creating keys in keyvault for {{ template "quorum-node.fullname" . }} ..."
            safeWriteSecret {{ template "quorum-node.fullname" . }}-nodekey /tmp/nodekey
            safeWriteSecret {{ template "quorum-node.fullname" . }}-nodekeypub /tmp/nodekey.pub
            safeWriteSecret {{ template "quorum-node.fullname" . }}-enode /tmp/enode
            update_enodes_configmap

          {{- if .Values.nodeFlags.privacy }}       

          {{- if .Values.node.quorumConfig.tessera.password }} 
            echo $'{{ .Values.node.quorumConfig.tessera.password  }}\n{{ .Values.node.quorumConfig.tessera.password }}\n' > /tmp/password.txt
          {{- else }} 
            echo $'\n\n' > /tmp/password.txt
          {{- end }}  

            java -jar /opt/istanbul-tools/jar/tessera-app.jar tessera -keygen -filename /tmp/tm < /tmp/password.txt

            echo "Creating tessera keys in keyvault for {{ template "quorum-node.fullname" . }} ..."
            safeWriteSecret {{ template "quorum-node.fullname" . }}-tmkey /tmp/tm.key
            safeWriteSecret {{ template "quorum-node.fullname" . }}-tmkeypub /tmp/tm.pub
            echo -ne $(sed -n '1p' /tmp/password.txt )> /tmp/password
            safeWriteSecret {{ template "quorum-node.fullname" . }}-tmpassword /tmp/password

            update_tessera_peers_configmap

          {{- end }}  

            
            echo "Completed"


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "quorum-node.fullname" . }}-pre-delete-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "hook-succeeded"
  labels:
    aadpodidbinding: "{{ .Values.azure.identityName }}"    
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        aadpodidbinding: "{{ .Values.azure.identityName }}"
    spec:
      serviceAccountName: {{ include "quorum-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      nodeSelector:
        env: prod
      containers:
        - name: {{ template "quorum-node.fullname" . }}-node-pre-delete-hook
          image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

              echo "{{ template "quorum-node.fullname" . }} Pre Delete hook ..."

              function delete_node_from_tessera_peers_configmap {
                kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
                # if there is no configmap, do nothing
                if [ $? -ne 0 ]; then
                  echo "No tessera-peers found, nothing to do..."
                # delete the one 
                else
                  echo "tessera-peers found, deleting {{ template "quorum-node.fullname" . }}..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                  cat /tmp/tessera-peers.raw | jq --arg NEEDLE "{{ template "quorum-node.fullname" . }}" 'del(.[] | select( .url | contains($NEEDLE) ))' > /tmp/tessera-peers
                  kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run | kubectl replace -f -
                fi
              }

              function delete_node_from_enodes_configmap {
                kubectl -n {{ .Release.Namespace }}  get configmap quorum-node-enodes -o json
                # if there is no configmap, do nothing
                if [ $? -ne 0 ]; then
                  echo "No peers found, nothing to do..."
                # delete the one 
                else    
                  echo "quorum-node-enodes found, deleting {{ template "quorum-node.fullname" . }}..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap quorum-node-enodes -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
                  cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "{{ template "quorum-node.fullname" . }}" 'del(.[] | select( . | contains($NEEDLE) ))' > /tmp/static-nodes.json
                  kubectl -n {{ .Release.Namespace }} create configmap quorum-node-enodes --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run | kubectl replace -f -
                fi
              }

              delete_node_from_tessera_peers_configmap
              delete_node_from_enodes_configmap

              echo "Completed"

